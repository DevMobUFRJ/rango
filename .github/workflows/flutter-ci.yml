name: Flutter CI

# CI for Android only

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    
jobs:
  build:
    # This job will run on ubuntu virtual machine
    runs-on: ubuntu-latest
    steps:
    
    # Setup Java environment in order to build the Android app.
    - uses: actions/checkout@v1
    - uses: actions/setup-java@v1
      with:
        java-version: '12.x'
      env:
        dev_maps_key: ${{ secrets.DEV_MAPS_KEY }}
        dev_messaging_key: ${{ secrets.DEV_MESSAGING_KEY }}
        prod_maps_key: ${{ secrets.PROD_MAPS_KEY }}
        prod_messaging_key: ${{ secrets.PROD_MESSAGING_KEY }}
    
    # Setup the flutter environment.
    - uses: subosito/flutter-action@v1
      with:
        channel: 'stable'
        # flutter-version: '1.12.x' # you can also specify exact version of flutter
    
    # Get flutter dependencies.
    - run: flutter pub get
    
    # Statically analyze the Dart code for any errors.
    - run: flutter analyze .
        
    # Build dev apk.
    - run: flutter build apk --flavor dev --release --dart-define=MAPS_KEY=$dev_maps_key --dart-define=MESSAGING_KEY=$dev_messaging_key
    
    # Upload generated apk to the artifacts.
    - uses: actions/upload-artifact@v1
      with:
        name: rango_cliente_dev
        path: build/app/outputs/apk/release/app-dev-release.apk
        
    # Build prod apk.
    - run: flutter build apk --flavor prod --release --dart-define=MAPS_KEY=$prod_maps_key --dart-define=MESSAGING_KEY=$prod_messaging_key
    
    # Upload generated apk to the artifacts.
    - uses: actions/upload-artifact@v1
      with:
        name: rango_cliente
        path: build/app/outputs/apk/release/app-prod-release.apk
